{
  "id": "snapshot_1759061533310_h86uslkep",
  "approvalId": "approval_1759061533190_z3n00vxwo",
  "approvalTitle": "bookmark-preference-ranking tasks.md 作成",
  "version": 1,
  "timestamp": "2025-09-28T12:12:13.310Z",
  "trigger": "initial",
  "status": "pending",
  "content": "# Tasks Document\n\n- [ ] 1. パーソナライズ関連テーブルのマイグレーションを追加\n  - File: migrations/006_create_preference_tables.sql\n  - File: migrations/apply_migrations.py\n  - 実装内容: preference_profiles・personalized_scores・preference_jobs・preference_feedbacks テーブルと主要インデックスを定義し、既存 apply_migrations スクリプトで安全に適用できるよう整備する。\n  - _Leverage: migrations/005_create_bookmarks.sql, migrations/apply_migrations.py_\n  - _Requirements: 1.1, 1.2, 1.3, 2.1, 3.3_\n  - _Prompt: Implement the task for spec bookmark-preference-ranking, first run spec-workflow-guide to get the workflow guide then implement the task: Role=Database Engineer specializing in SQLite migrations | Task=Create forward-only migration to add preference_profiles, personalized_scores, preference_jobs, preference_feedbacks with required indexes and uniqueness while keeping apply_migrations.py idempotent | Restrictions=Maintain backward compatibility with existing databases, avoid dropping tables, wrap schema changes in transactional-friendly statements | _Leverage=migrations/005_create_bookmarks.sql; migrations/apply_migrations.py | _Requirements=1.1;1.2;1.3;2.1;3.3 | Success=Running `python migrations/apply_migrations.py --db ./data/scraps.db` adds the new tables without errors and re-running is a no-op | ProgressInstructions=Before coding mark this task as [-] in .spec-workflow/specs/bookmark-preference-ranking/tasks.md, after verifying the migration succeeds update it to [x]._\n\n- [ ] 2. ORMモデルとテーブル管理を拡張\n  - File: app/core/database.py\n  - File: app/core/__init__.py\n  - 実装内容: SQLAlchemy Base に preference_profiles・personalized_scores・preference_jobs・preference_feedbacks のモデルとリレーションを追加し、create_tables ヘルパーで新テーブル作成を保証する。\n  - _Leverage: app/core/database.py (Document, PostprocessJob), app/core/__init__.py_\n  - _Requirements: 1.1, 1.2, 2.1, 3.3_\n  - _Prompt: Implement the task for spec bookmark-preference-ranking, first run spec-workflow-guide to get the workflow guide then implement the task: Role=Backend Engineer experienced with SQLAlchemy models | Task=Extend app/core/database.py with ORM classes for preference profiles, personalized scores, personalization jobs, and preference feedbacks plus relationship hooks and helper utilities | Restrictions=Do not break existing imports, keep new models consistent with naming/UUID defaults, ensure create_tables creates schemas when DB missing | _Leverage=app/core/database.PostprocessJob; app/core/database.Document | _Requirements=1.1;1.2;2.1;3.3 | Success=New ORM classes are importable, metadata.create_all() builds tables, and existing tests still pass | ProgressInstructions=Mark the task as [-] before editing and set it to [x] once SQLAlchemy models and helpers are verified._\n\n- [ ] 3. 嗜好・スコア用データ契約を実装\n  - File: app/services/personalization_models.py\n  - File: app/services/__init__.py\n  - 実装内容: PreferenceProfileDTO・PersonalizedScoreDTO・ExplanationBreakdown などデータクラスを定義し、サービス層で型安全に利用できるよう公開する。\n  - _Leverage: dataclasses, typing, app/services/__init__.py_\n  - _Requirements: 1.1, 2.1, 3.1_\n  - _Prompt: Implement the task for spec bookmark-preference-ranking, first run spec-workflow-guide to get the workflow guide then implement the task: Role=Python Application Architect focusing on data contracts | Task=Create dataclasses/Pydantic models that represent preference profiles, personalized scores, and explanation breakdowns with serialization helpers | Restrictions=Keep modules lightweight, avoid circular imports, ensure DTOs cover all fields from design | _Leverage=dataclasses module; existing service exports | _Requirements=1.1;2.1;3.1 | Success=Services can import DTOs without circular dependency and mypy/pytest (if run) succeed | ProgressInstructions=Set to [-] before coding and flip to [x] after DTOs are integrated._\n\n- [ ] 4. PreferenceProfileService を実装\n  - File: app/services/preference_profile.py\n  - File: tests/test_preference_profile.py\n  - 実装内容: ブックマーク集合からプロファイル更新を行い、コールドスタート判定・再試行ロジック・LLM埋め込み生成を包含するサービスと単体テストを追加する。\n  - _Leverage: app/services/llm_client.py, app/services/similarity.py_\n  - _Requirements: 1.1, 1.2, 1.3_\n  - _Prompt: Implement the task for spec bookmark-preference-ranking, first run spec-workflow-guide to get the workflow guide then implement the task: Role=Machine Learning Engineer specializing in recommendation profiles | Task=Build PreferenceProfileService with update_profile logic, cold-start thresholds, embedding aggregation, and retry-safe error handling plus unit tests validating edge cases | Restrictions=Keep external API calls abstracted via LLMClient, do not hardcode user identity, ensure service returns PreferenceProfileDTO | _Leverage=app/services/llm_client.LLMClient; app/services/similarity.cosine_similarity | _Requirements=1.1;1.2;1.3 | Success=Unit tests in tests/test_preference_profile.py cover happy path and failure scenarios and pass | ProgressInstructions=Mark [-] before implementing and switch to [x] once tests pass._\n\n- [ ] 5. PersonalizedRankingService と ExplanationPresenter を構築\n  - File: app/services/personalized_ranking.py\n  - File: tests/test_personalized_ranking.py\n  - 実装内容: プロファイルとドキュメント群からスコア・順位・説明テキストを生成するサービスと説明整形ロジックを実装し、スコア合成をテストで検証する。\n  - _Leverage: app/services/similarity.py, app/templates/partials/notification.html_\n  - _Requirements: 2.1, 2.2, 3.1_\n  - _Prompt: Implement the task for spec bookmark-preference-ranking, first run spec-workflow-guide to get the workflow guide then implement the task: Role=Recommender Systems Engineer focusing on ranking pipelines | Task=Create PersonalizedRankingService to compute normalized scores, ranks, and ExplanationPresenter that returns Japanese rationale strings; add unit tests covering weighting, freshness decay, and explanation formatting | Restrictions=Honor design weight formula, keep outputs clipped 0-1, avoid DB access inside service | _Leverage=app/services/similarity.calculate_document_similarity; templates style guidelines | _Requirements=2.1;2.2;3.1 | Success=tests/test_personalized_ranking.py validates scoring, ordering, and explanation messaging | ProgressInstructions=Set [-] before editing; after tests pass update to [x]._\n\n- [ ] 6. PersonalizedScoreRepository を実装\n  - File: app/services/personalized_repository.py\n  - File: tests/test_personalized_repository.py\n  - 実装内容: personalized_scores テーブルへの bulk_upsert・取得・削除ユーティリティを提供するリポジトリ層とそのユニットテストを追加する。\n  - _Leverage: app/core/database.SessionLocal, sqlalchemy.orm Session_\n  - _Requirements: 1.1, 2.1_\n  - _Prompt: Implement the task for spec bookmark-preference-ranking, first run spec-workflow-guide to get the workflow guide then implement the task: Role=Python Backend Engineer specializing in repositories | Task=Create repository functions for fetching, bulk upserting, and cleaning personalized scores plus tests with a temporary SQLite DB | Restrictions=Reuse SessionLocal patterns, ensure operations are transactional, avoid duplicate inserts | _Leverage=sqlalchemy Session APIs; existing repository-style helpers in services | _Requirements=1.1;2.1 | Success=tests/test_personalized_repository.py covers insert/update/idempotency and passes | ProgressInstructions=Mark [-] before starting and change to [x] when repository tests succeed._\n\n- [ ] 7. パーソナライズジョブディスパッチャとワーカーを追加\n  - File: app/services/personalization_queue.py\n  - File: app/services/personalization_worker.py\n  - File: scripts/run_preference_worker.py\n  - 実装内容: preference_jobs テーブル向けの enqueue/lease/backoff ロジックと常駐ワーカーを実装し、開発用スクリプトで起動できるようにする。\n  - _Leverage: app/services/postprocess_queue.py, scripts/test_postprocess.py_\n  - _Requirements: 1.1, 1.3_\n  - _Prompt: Implement the task for spec bookmark-preference-ranking, first run spec-workflow-guide to get the workflow guide then implement the task: Role=Backend Systems Engineer focused on job queues | Task=Create dispatcher helpers and worker loop for preference jobs mirroring postprocess_queue patterns including exponential backoff and graceful shutdown, plus CLI script to run worker | Restrictions=Share retry constants via module-level config, ensure worker uses SessionLocal safely, keep script fish-shell friendly | _Leverage=app/services/postprocess_queue.enqueue_job_for_document; scripts/run_bookmarks_smoke.py | _Requirements=1.1;1.3 | Success=Manual run of scripts/run_preference_worker.py processes queued jobs and logs status | ProgressInstructions=Switch to [-] before edits, set to [x] after worker loop is verified._\n\n- [ ] 8. ブックマークと取り込みフローからジョブを発火\n  - File: app/api/routes/bookmarks.py\n  - File: app/services/postprocess.py\n  - File: app/services/ingest_worker.py\n  - 実装内容: ブックマーク作成/削除およびドキュメントポストプロセス完了時に preference_jobs を enque し、プロファイル/スコア再計算を保証する。\n  - _Leverage: app/services/personalization_queue.py, app/services/postprocess_queue.py_\n  - _Requirements: 1.1, 1.3_\n  - _Prompt: Implement the task for spec bookmark-preference-ranking, first run spec-workflow-guide to get the workflow guide then implement the task: Role=Backend Integration Engineer | Task=Invoke personalization dispatcher from bookmark routes and postprocess pipeline ensuring retries/logging follow requirements | Restrictions=Do not block API response on job completion, guard against DB absence in tests, reuse existing logging approach | _Leverage=app/api/routes/bookmarks.create_bookmark; app/services/postprocess.process_doc_once | _Requirements=1.1;1.3 | Success=Manual bookmark creation schedules a personalization job and tests confirm enqueue calls | ProgressInstructions=Set to [-] before coding, update to [x] when integration verified._\n\n- [ ] 9. パーソナライズソートAPIを追加\n  - File: app/api/routes/documents.py\n  - File: app/services/personalized_repository.py\n  - 実装内容: `sort=personalized` クエリを解釈し personalized_scores を取得・フォールバック処理を行う API 応答を実装し、関連度スコア・説明を返却する。\n  - _Leverage: app/api/routes/documents.list_documents, FastAPI Depends_\n  - _Requirements: 2.1, 2.2_\n  - _Prompt: Implement the task for spec bookmark-preference-ranking, first run spec-workflow-guide to get the workflow guide then implement the task: Role=FastAPI Developer focusing on query handlers | Task=Update list_documents to delegate personalized sorting, include explanation payloads, and gracefully fallback when scores missing | Restrictions=Keep backwards-compatible JSON structure, avoid N+1 queries, honor limit/offset semantics | _Leverage=existing list_documents logic; personalized repository helpers | _Requirements=2.1;2.2 | Success=API returns sorted docs when scores exist and reverts to default order otherwise, with tests verifying both paths | ProgressInstructions=Mark [-] first, set to [x] after automated tests validate the API._\n\n- [ ] 10. ドキュメント一覧UIとクライアント状態を拡張\n  - File: app/templates/documents.html\n  - File: app/templates/partials/document_card.html\n  - File: static/js/personalized-sort.js\n  - 実装内容: ソート切り替え UI・推薦理由表示・セッション持続を実現し、日本語トーンを維持した説明テキストとトグル状態保持を実装する。\n  - _Leverage: app/templates/partials/sort_controls.html, static/js/icons.js_\n  - _Requirements: 2.3, 3.1, 3.2_\n  - _Prompt: Implement the task for spec bookmark-preference-ranking, first run spec-workflow-guide to get the workflow guide then implement the task: Role=HTMX/Tailwind Frontend Developer | Task=Add personalized sort toggle, render reason badges, persist selection via localStorage/sessionStorage, and ensure accessibility in Japanese UI | Restrictions=Avoid breaking existing HTMX requests, reuse tailwind utility classes, keep scripts fish-shell safe when referenced | _Leverage=existing HTMX patterns in templates; static assets conventions | _Requirements=2.3;3.1;3.2 | Success=Manual UI test shows toggle, reasons, and remembered state across navigation | ProgressInstructions=Toggle to [-] before editing and back to [x] when UI verified._\n\n- [ ] 11. パーソナライズフィードバック収集を実装\n  - File: app/api/routes/documents.py\n  - File: app/services/personalized_feedback.py\n  - File: app/templates/partials/document_card.html\n  - 実装内容: 「関連性が低い」フィードバック送信エンドポイントとサービス処理を追加し、preference_feedbacks へ記録して再計算ジョブを enqueue する。\n  - _Leverage: app/core/database.Feedback, app/services/personalization_queue.py_\n  - _Requirements: 3.3_\n  - _Prompt: Implement the task for spec bookmark-preference-ranking, first run spec-workflow-guide to get the workflow guide then implement the task: Role=Full-stack Developer focusing on feedback loops | Task=Expose POST endpoint for low relevance feedback, store entries, enqueue personalization job, and wire UI button | Restrictions=Validate input, avoid duplicate submissions per session, keep responses HTMX-friendly | _Leverage=existing feedback route patterns; personalization queue helpers | _Requirements=3.3 | Success=Submitting feedback persists record and schedules recalculation, verified by tests | ProgressInstructions=Mark as [-] before implementing and set to [x] once feedback flow is tested._\n\n- [ ] 12. パーソナライズ機能のテストスイートを整備\n  - File: tests/test_documents_personalized.py\n  - File: tests/test_personalization_worker.py\n  - File: tests/test_personalization_ui.py\n  - 実装内容: API統合テスト・ワーカーフローテスト・Playwright UIテストでパーソナライズ並べ替えと説明表示、フィードバックフローを検証する。\n  - _Leverage: tests/test_ingest_summary.py, tests/test_browser.py_\n  - _Requirements: 1.1, 1.3, 2.1, 2.2, 2.3, 3.1, 3.2, 3.3_\n  - _Prompt: Implement the task for spec bookmark-preference-ranking, first run spec-workflow-guide to get the workflow guide then implement the task: Role=QA Automation Engineer for FastAPI/Playwright stacks | Task=Author integration and E2E tests covering personalized sort responses, worker retries, UI toggle persistence, and feedback handling | Restrictions=Reuse existing test fixtures/DB factories, keep Playwright tests headless-friendly, mark slow tests appropriately | _Leverage=tests/conftest.py fixtures; tests/test_auto_summary_ui.py patterns | _Requirements=1.1;1.3;2.1;2.2;2.3;3.1;3.2;3.3 | Success=Pytest and Playwright suites pass locally validating new behavior | ProgressInstructions=Set [-] before test authoring and toggle to [x] when suites are green._\n",
  "fileStats": {
    "size": 15574,
    "lines": 103,
    "lastModified": "2025-09-28T12:11:07.839Z"
  },
  "comments": []
}