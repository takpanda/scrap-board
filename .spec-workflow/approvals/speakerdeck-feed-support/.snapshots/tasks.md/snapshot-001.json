{
  "id": "snapshot_1759559583634_epipio89j",
  "approvalId": "approval_1759559583626_dl5s1t54w",
  "approvalTitle": "Tasks document for SpeakerDeck Feed Support",
  "version": 1,
  "timestamp": "2025-10-04T06:33:03.634Z",
  "trigger": "initial",
  "status": "pending",
  "content": "# Tasks: SpeakerDeck Feed Support\n\n## 概要\nこのタスクリストは、SpeakerDeckのRSS/Atomフィード対応とPDF自動保存機能を実装するための作業を分解したものです。各タスクは1-3ファイルの変更で完結する原子的な作業単位です。\n\n---\n\n## Phase 1: データベース基盤\n\n### - [ ] Task 1.1: PDF対応のためのDBマイグレーション作成\n**Files**: \n- `migrations/007_add_pdf_support.sql` (新規)\n\n**Description**:\ndocumentsテーブルに`pdf_path`カラムを追加し、PDF保存状態を記録できるようにする。部分インデックスでPDF有無のクエリを高速化。\n\n**Requirements**: US-3, US-5\n\n**Dependencies**: なし\n\n**_Prompt**:\n```\nImplement the task for spec speakerdeck-feed-support, first run spec-workflow-guide to get the workflow guide then implement the task:\n\nRole: Database Engineer specializing in SQLite migrations and schema design\n\nTask: Create migration file `migrations/007_add_pdf_support.sql` to add pdf_path column to documents table following requirement US-3. The column should store relative paths like \"assets/pdfs/speakerdeck/{document_id}.pdf\". Create a partial index for faster queries on documents with PDFs.\n\nContext:\n- Reference existing migrations in migrations/ directory for style and patterns\n- documents table exists with columns: id (TEXT PRIMARY KEY), url, title, body_markdown, etc.\n- Need to support NULL values for backward compatibility with existing documents\n\nRestrictions:\n- Must use ALTER TABLE ADD COLUMN syntax (SQLite compatible)\n- Do not modify existing columns\n- Index should only cover non-NULL pdf_path values (partial index)\n- Follow naming convention: idx_documents_<column_name>\n\nLeverage:\n- migrations/001_create_documents.sql for table structure reference\n- migrations/apply_migrations.py for execution patterns\n\nSuccess Criteria:\n- Migration file creates pdf_path column as TEXT NULL\n- Partial index created: CREATE INDEX idx_documents_pdf_path ON documents(pdf_path) WHERE pdf_path IS NOT NULL\n- File follows project migration format\n- Can be executed without errors on existing database\n\nInstructions:\n1. First, update tasks.md: Change `- [ ] Task 1.1` to `- [-] Task 1.1` to mark as in-progress\n2. Create the migration file with appropriate SQL statements\n3. After completing the task, update tasks.md: Change `- [-] Task 1.1` to `- [x] Task 1.1` to mark as completed\n```\n\n---\n\n## Phase 2: SpeakerDeck PDF処理コア\n\n### - [ ] Task 2.1: SpeakerDeckHandler クラスの実装\n**Files**: \n- `app/services/speakerdeck_handler.py` (新規)\n\n**Description**:\nSpeakerDeck特有のPDF取得・ダウンロード処理をカプセル化するハンドラークラス。oEmbed APIとHTMLスクレイピングでPDF URLを抽出し、ストリーミングダウンロードで保存。\n\n**Requirements**: US-3\n\n**Dependencies**: Task 1.1\n\n**_Prompt**:\n```\nImplement the task for spec speakerdeck-feed-support, first run spec-workflow-guide to get the workflow guide then implement the task:\n\nRole: Backend Developer specializing in web scraping and API integration\n\nTask: Create `app/services/speakerdeck_handler.py` with SpeakerDeckHandler class following requirement US-3. Implement methods to detect SpeakerDeck URLs, extract PDF URLs using oEmbed API with HTML scraping fallback, and download PDFs with streaming.\n\nContext:\n- SpeakerDeck oEmbed API: https://speakerdeck.com/oembed.json?url={presentation_url}\n- PDF URLs typically at: https://speakerd.s3.amazonaws.com/presentations/{id}/{slug}.pdf\n- HTML may contain PDF links in meta tags, download buttons, or data attributes\n- Need to handle large PDF files (up to 100MB)\n\nRestrictions:\n- Must validate URLs are from speakerdeck.com domain only\n- Set timeout to 30 seconds for all HTTP requests\n- Implement file size limit (100MB)\n- Clean up partial files on download failure\n- Do not raise exceptions - return None on errors and log warnings\n\nLeverage:\n- httpx library for HTTP requests (already in project)\n- app/services/extractor.py for HTTP patterns\n- app/core/config.py for timeout configuration\n\nSuccess Criteria:\n- Class methods: is_speakerdeck_url(), get_pdf_url(), download_pdf()\n- get_pdf_url() tries oEmbed API first, falls back to HTML scraping\n- download_pdf() saves to data/assets/pdfs/speakerdeck/{document_id}.pdf\n- Returns relative path on success, None on failure\n- Comprehensive logging (INFO for success, WARNING for failures, ERROR for critical issues)\n- Handles all exceptions gracefully\n\nInstructions:\n1. First, update tasks.md: Change `- [ ] Task 2.1` to `- [-] Task 2.1` to mark as in-progress\n2. Create the speakerdeck_handler.py file with the SpeakerDeckHandler class\n3. Implement all required methods with proper error handling and logging\n4. After completing the task, update tasks.md: Change `- [-] Task 2.1` to `- [x] Task 2.1` to mark as completed\n```\n\n---\n\n### - [ ] Task 2.2: SpeakerDeckHandlerのユニットテスト\n**Files**: \n- `tests/test_speakerdeck_handler.py` (新規)\n\n**Description**:\nSpeakerDeckHandlerの各メソッドをモックを使ってテスト。URL検証、PDF URL抽出、ダウンロード処理の成功・失敗シナリオをカバー。\n\n**Requirements**: US-3\n\n**Dependencies**: Task 2.1\n\n**_Prompt**:\n```\nImplement the task for spec speakerdeck-feed-support, first run spec-workflow-guide to get the workflow guide then implement the task:\n\nRole: QA Engineer specializing in Python unit testing with pytest and mocking\n\nTask: Create comprehensive unit tests for SpeakerDeckHandler in `tests/test_speakerdeck_handler.py` covering requirement US-3. Test all methods with both success and failure scenarios using mocked HTTP responses.\n\nContext:\n- SpeakerDeckHandler has three main methods: is_speakerdeck_url(), get_pdf_url(), download_pdf()\n- Need to mock httpx.Client for HTTP requests\n- Need to mock file system operations for download tests\n- Test data: valid SpeakerDeck URLs, invalid URLs, various HTML responses\n\nRestrictions:\n- Must not make actual HTTP requests\n- Must not create actual files (mock file operations)\n- Each test should be independent and isolated\n- Follow pytest conventions and existing test patterns\n\nLeverage:\n- conftest.py for pytest fixtures\n- tests/test_basic.py for testing patterns\n- pytest-mock for mocking\n\nSuccess Criteria:\n- Test is_speakerdeck_url() with valid/invalid URLs\n- Test get_pdf_url() with mocked oEmbed success, oEmbed failure + HTML scraping success, complete failure\n- Test download_pdf() with successful download, network error, file size limit exceeded\n- All tests pass independently\n- Test coverage >80% for speakerdeck_handler.py\n- Clear test names and docstrings\n\nInstructions:\n1. First, update tasks.md: Change `- [ ] Task 2.2` to `- [-] Task 2.2` to mark as in-progress\n2. Create the test file with comprehensive test cases\n3. Run tests with: pytest tests/test_speakerdeck_handler.py -v\n4. After completing the task, update tasks.md: Change `- [-] Task 2.2` to `- [x] Task 2.2` to mark as completed\n```\n\n---\n\n## Phase 3: フィード取得機能\n\n### - [ ] Task 3.1: SpeakerDeckフィード取得関数の実装\n**Files**: \n- `app/services/ingest_worker.py` (変更)\n\n**Description**:\ningest_worker.pyに`_fetch_speakerdeck_items()`関数を追加。feedparserでRSS/Atomフィードをパースし、エントリリストを返す。\n\n**Requirements**: US-1, US-2\n\n**Dependencies**: なし\n\n**_Prompt**:\n```\nImplement the task for spec speakerdeck-feed-support, first run spec-workflow-guide to get the workflow guide then implement the task:\n\nRole: Backend Developer specializing in RSS/Atom feed processing and integration\n\nTask: Add `_fetch_speakerdeck_items()` function to `app/services/ingest_worker.py` following requirements US-1 and US-2. Parse SpeakerDeck RSS/Atom feeds using feedparser and return list of entries.\n\nContext:\n- SpeakerDeck feed URL format: https://speakerdeck.com/{username}.rss or .atom\n- Config keys: username (generates URL), url (direct URL), per_page (max items), format (rss/atom)\n- Return format: [{\"link\": str, \"title\": str, \"published\": str, \"summary\": str}, ...]\n- Similar functions exist: _fetch_qiita_items(), _fetch_hatena_items(), _fetch_rss_items()\n\nRestrictions:\n- Must follow existing function patterns in ingest_worker.py\n- Handle missing feedparser gracefully (ModuleNotFoundError)\n- Do not raise exceptions - return empty list on errors\n- Log appropriate messages (INFO for success, WARNING for errors)\n\nLeverage:\n- app/services/ingest_worker.py existing _fetch_*_items() functions for patterns\n- feedparser library (already in project)\n- app/core/config.py for configuration patterns\n\nSuccess Criteria:\n- Function signature: def _fetch_speakerdeck_items(config: Dict[str, Any]) -> List[Dict]\n- Generates feed URL from username or uses direct URL\n- Parses RSS and Atom formats\n- Respects per_page limit (default: 20)\n- Returns list with required keys: link, title, published, summary\n- Comprehensive error handling and logging\n\nInstructions:\n1. First, update tasks.md: Change `- [ ] Task 3.1` to `- [-] Task 3.1` to mark as in-progress\n2. Add the _fetch_speakerdeck_items() function following existing patterns\n3. Ensure proper error handling and logging\n4. After completing the task, update tasks.md: Change `- [-] Task 3.1` to `- [x] Task 3.1` to mark as completed\n```\n\n---\n\n### - [ ] Task 3.2: trigger_fetch_for_source へのSpeakerDeck統合\n**Files**: \n- `app/services/ingest_worker.py` (変更)\n\n**Description**:\n`trigger_fetch_for_source()`関数にspeakerdeckタイプのハンドリングを追加。既存のqiita、hatena、rssと同様のパターンで統合。\n\n**Requirements**: US-1, US-2\n\n**Dependencies**: Task 3.1\n\n**_Prompt**:\n```\nImplement the task for spec speakerdeck-feed-support, first run spec-workflow-guide to get the workflow guide then implement the task:\n\nRole: Backend Developer specializing in system integration and workflow orchestration\n\nTask: Modify `trigger_fetch_for_source()` in `app/services/ingest_worker.py` to integrate SpeakerDeck feed fetching following requirements US-1 and US-2. Add speakerdeck type handling alongside existing source types.\n\nContext:\n- Function already handles: qiita, hatena, rss source types\n- Need to add elif branch for source_type == \"speakerdeck\"\n- Call _fetch_speakerdeck_items(config) and process items same way as other sources\n- Items are passed to _insert_document_from_url() for ingestion\n\nRestrictions:\n- Must maintain existing source type handling\n- Follow exact same pattern as other source types\n- Do not modify other source type logic\n- Preserve error handling and logging patterns\n\nLeverage:\n- app/services/ingest_worker.py existing trigger_fetch_for_source() function\n- Existing elif branches for qiita, hatena, rss as templates\n\nSuccess Criteria:\n- Add elif source_type == \"speakerdeck\": branch\n- Call _fetch_speakerdeck_items(config) to get items\n- Process items through same pipeline as other sources\n- Logging matches existing pattern\n- No regression in existing source types\n\nInstructions:\n1. First, update tasks.md: Change `- [ ] Task 3.2` to `- [-] Task 3.2` to mark as in-progress\n2. Locate the if/elif chain in trigger_fetch_for_source()\n3. Add speakerdeck elif branch following existing patterns\n4. After completing the task, update tasks.md: Change `- [-] Task 3.2` to `- [x] Task 3.2` to mark as completed\n```\n\n---\n\n## Phase 4: Ingestionパイプライン統合\n\n### - [ ] Task 4.1: _insert_document_from_url へのPDF処理追加\n**Files**: \n- `app/services/ingest_worker.py` (変更)\n\n**Description**:\n`_insert_document_from_url()`にSpeakerDeck検出とPDF保存処理を追加。ドキュメント挿入後、URLがSpeakerDeckの場合はPDFをダウンロードしてパスを更新。\n\n**Requirements**: US-3\n\n**Dependencies**: Task 2.1, Task 3.2\n\n**_Prompt**:\n```\nImplement the task for spec speakerdeck-feed-support, first run spec-workflow-guide to get the workflow guide then implement the task:\n\nRole: Backend Developer specializing in data pipeline integration and transaction management\n\nTask: Modify `_insert_document_from_url()` in `app/services/ingest_worker.py` to add SpeakerDeck PDF processing following requirement US-3. After document insertion, detect SpeakerDeck URLs and download PDFs.\n\nContext:\n- Function already handles: content extraction, document insertion, postprocessing\n- Need to add PDF handling after doc_id is returned from _insert_document_if_new()\n- Use SpeakerDeckHandler to detect, get PDF URL, and download\n- Update documents table with pdf_path\n- PDF download failure should not fail document insertion\n\nRestrictions:\n- Must add PDF handling AFTER document insertion (so doc_id exists)\n- PDF errors must be logged but not re-raised\n- Must commit PDF path update separately\n- Do not modify existing extraction or insertion logic\n- Maintain transaction integrity\n\nLeverage:\n- app/services/ingest_worker.py existing _insert_document_from_url() function\n- app/services/speakerdeck_handler.py for SpeakerDeckHandler\n- SQLAlchemy text() for UPDATE query\n\nSuccess Criteria:\n- After document insertion, check if URL is SpeakerDeck\n- Call SpeakerDeckHandler.get_pdf_url() and download_pdf()\n- Update documents table: UPDATE documents SET pdf_path = :pdf_path WHERE id = :id\n- Commit PDF path update\n- Log INFO on success, WARNING on PDF extraction failure, ERROR on download failure\n- Document insertion succeeds even if PDF fails\n\nInstructions:\n1. First, update tasks.md: Change `- [ ] Task 4.1` to `- [-] Task 4.1` to mark as in-progress\n2. Import SpeakerDeckHandler at top of file\n3. Add PDF processing block after _insert_document_if_new() call\n4. Ensure proper error handling and transaction management\n5. After completing the task, update tasks.md: Change `- [-] Task 4.1` to `- [x] Task 4.1` to mark as completed\n```\n\n---\n\n## Phase 5: API エンドポイント\n\n### - [ ] Task 5.1: PDFダウンロードAPIエンドポイントの実装\n**Files**: \n- `app/api/routes/documents.py` (変更または新規)\n\n**Description**:\n`GET /api/documents/{document_id}/pdf` エンドポイントを追加。ドキュメントIDからPDFファイルを取得してFileResponseで返す。セキュリティ検証を含む。\n\n**Requirements**: US-4\n\n**Dependencies**: Task 1.1, Task 4.1\n\n**_Prompt**:\n```\nImplement the task for spec speakerdeck-feed-support, first run spec-workflow-guide to get the workflow guide then implement the task:\n\nRole: API Developer specializing in FastAPI endpoints and secure file serving\n\nTask: Add PDF download endpoint to `app/api/routes/documents.py` following requirement US-4. Implement `GET /api/documents/{document_id}/pdf` with security validations and proper file response headers.\n\nContext:\n- Need to check if documents.py exists in app/api/routes/, if not create it\n- Endpoint retrieves document from database, validates pdf_path exists\n- Must validate file path is within data/ directory (prevent path traversal)\n- Return FileResponse with appropriate Content-Type and Content-Disposition headers\n- Generate safe filename from document title\n\nRestrictions:\n- Must validate document_id exists in database\n- Must check pdf_path is not NULL\n- Must validate file exists on disk\n- Must prevent path traversal attacks (resolve paths and check prefix)\n- Must sanitize filename (remove non-alphanumeric except spaces, hyphens, underscores)\n- Use FastAPI HTTPException for errors (404 for not found, 403 for forbidden)\n\nLeverage:\n- app/core/database.py for get_db dependency\n- FastAPI FileResponse for file serving\n- pathlib.Path for path operations\n- SQLAlchemy text() for queries\n\nSuccess Criteria:\n- Endpoint: @router.get(\"/{document_id}/pdf\")\n- Returns 404 if document not found or pdf_path is NULL\n- Returns 404 if file not found on disk\n- Returns 403 if path traversal detected\n- Returns FileResponse with media_type=\"application/pdf\"\n- Content-Disposition header: attachment; filename=\"{safe_title}.pdf\"\n- Filename sanitized and limited to 100 characters\n\nInstructions:\n1. First, update tasks.md: Change `- [ ] Task 5.1` to `- [-] Task 5.1` to mark as in-progress\n2. Check if app/api/routes/documents.py exists, create if needed with router setup\n3. Implement download_pdf endpoint with all security validations\n4. Test with: curl http://localhost:8000/api/documents/{valid_id}/pdf\n5. After completing the task, update tasks.md: Change `- [-] Task 5.1` to `- [x] Task 5.1` to mark as completed\n```\n\n---\n\n### - [ ] Task 5.2: メインアプリケーションへのルーター登録\n**Files**: \n- `app/main.py` (変更)\n\n**Description**:\nmain.pyにdocumentsルーターをinclude_router()で登録。既存のrouterパターンに従う。\n\n**Requirements**: US-4\n\n**Dependencies**: Task 5.1\n\n**_Prompt**:\n```\nImplement the task for spec speakerdeck-feed-support, first run spec-workflow-guide to get the workflow guide then implement the task:\n\nRole: Backend Developer specializing in FastAPI application configuration\n\nTask: Register documents router in `app/main.py` following requirement US-4. Add include_router() call for the new documents endpoints.\n\nContext:\n- main.py already includes other routers (e.g., admin routes)\n- Need to import documents router from app.api.routes.documents\n- Add app.include_router(documents.router) after other router registrations\n- Router already has prefix=\"/api/documents\" configured in documents.py\n\nRestrictions:\n- Must place router registration with other include_router() calls\n- Do not modify existing router registrations\n- Follow existing import patterns\n- Maintain router order if significant\n\nLeverage:\n- app/main.py existing router registrations for patterns\n- app/api/routes/documents.py for router import\n\nSuccess Criteria:\n- Import: from app.api.routes import documents\n- Call: app.include_router(documents.router)\n- Endpoint accessible at /api/documents/{id}/pdf\n- No errors on application startup\n\nInstructions:\n1. First, update tasks.md: Change `- [ ] Task 5.2` to `- [-] Task 5.2` to mark as in-progress\n2. Add import statement for documents router\n3. Add include_router() call in appropriate location\n4. Test startup: uvicorn app.main:app --reload\n5. After completing the task, update tasks.md: Change `- [-] Task 5.2` to `- [x] Task 5.2` to mark as completed\n```\n\n---\n\n## Phase 6: UIコンポーネント\n\n### - [ ] Task 6.1: 記事カードへのPDFダウンロードボタン追加\n**Files**: \n- `app/templates/partials/document_card.html` (変更)\n\n**Description**:\ndocument_card.htmlにPDFダウンロードボタンを追加。pdf_pathがある場合のみ表示、Lucideアイコンを使用。\n\n**Requirements**: US-4\n\n**Dependencies**: Task 5.2\n\n**_Prompt**:\n```\nImplement the task for spec speakerdeck-feed-support, first run spec-workflow-guide to get the workflow guide then implement the task:\n\nRole: Frontend Developer specializing in HTML/Jinja2 templating and UI components\n\nTask: Add PDF download button to `app/templates/partials/document_card.html` following requirement US-4. Add conditional display for documents with pdf_path.\n\nContext:\n- Card already has action buttons (元記事, 詳細を見る)\n- Need to add PDF download button between them\n- Use Jinja2 conditional: {% if document.pdf_path %}\n- Use Lucide icon: file-down\n- Button should link to /api/documents/{{ document.id }}/pdf\n- Style: red-themed pill button to match PDF file association\n\nRestrictions:\n- Must only display if document.pdf_path exists\n- Must use existing pill button classes for consistency\n- Must include download attribute on anchor tag\n- Do not modify existing buttons\n- Follow existing Lucide icon patterns\n\nLeverage:\n- app/templates/partials/document_card.html existing button structures\n- Lucide icons: https://lucide.dev/icons/file-down\n- Existing pill classes: pill nowrap-tag inline-flex items-center h-6 px-2 text-xs\n\nSuccess Criteria:\n- Button displays only when pdf_path is not NULL\n- Anchor tag: href=\"/api/documents/{{ document.id }}/pdf\" download\n- Icon: <i data-lucide=\"file-down\" class=\"w-4 h-4 mr-1\"></i>\n- Classes: pill nowrap-tag inline-flex items-center h-6 px-2 text-xs bg-red-50 text-red-600 border border-red-200 hover:bg-red-100\n- Title attribute: \"PDFをダウンロード\"\n- Label text: \"PDF\"\n\nInstructions:\n1. First, update tasks.md: Change `- [ ] Task 6.1` to `- [-] Task 6.1` to mark as in-progress\n2. Locate the action buttons section in document_card.html\n3. Add PDF download button with conditional display\n4. Test rendering with document that has pdf_path and one that doesn't\n5. After completing the task, update tasks.md: Change `- [-] Task 6.1` to `- [x] Task 6.1` to mark as completed\n```\n\n---\n\n### - [ ] Task 6.2: ドキュメント詳細ページへのPDFダウンロードボタン追加\n**Files**: \n- `app/templates/document_detail.html` (変更)\n\n**Description**:\ndocument_detail.htmlのヘッダーアクションボタン群にPDFダウンロードボタンを追加。カードよりも大きめのボタンスタイル。\n\n**Requirements**: US-4\n\n**Dependencies**: Task 6.1\n\n**_Prompt**:\n```\nImplement the task for spec speakerdeck-feed-support, first run spec-workflow-guide to get the workflow guide then implement the task:\n\nRole: Frontend Developer specializing in HTML/Jinja2 templating and responsive design\n\nTask: Add PDF download button to `app/templates/document_detail.html` following requirement US-4. Add prominent button in header action section.\n\nContext:\n- Detail page has header section with action buttons (larger than card buttons)\n- Need to add PDF download button alongside existing actions\n- Use same conditional: {% if document.pdf_path %}\n- Use Lucide icon: file-down (larger size for detail page)\n- Style should be consistent with detail page button sizing (px-4 py-2)\n\nRestrictions:\n- Must only display if document.pdf_path exists\n- Must use detail page button classes (not card pill classes)\n- Must include download attribute\n- Follow existing detail page button patterns\n- Do not modify existing buttons\n\nLeverage:\n- app/templates/document_detail.html existing action button structures\n- Lucide icons with larger size: w-5 h-5\n- Detail page button classes\n\nSuccess Criteria:\n- Button displays only when pdf_path is not NULL\n- Anchor tag: href=\"/api/documents/{{ document.id }}/pdf\" download\n- Icon: <i data-lucide=\"file-down\" class=\"w-5 h-5 mr-2\"></i>\n- Classes: inline-flex items-center px-4 py-2 bg-red-50 text-red-600 border border-red-200 rounded-md hover:bg-red-100 transition-colors\n- Button text: \"PDFをダウンロード\"\n- Positioned with other action buttons in header\n\nInstructions:\n1. First, update tasks.md: Change `- [ ] Task 6.2` to `- [-] Task 6.2` to mark as in-progress\n2. Locate the header action buttons section in document_detail.html\n3. Add PDF download button with appropriate sizing\n4. Test rendering and button interactions\n5. After completing the task, update tasks.md: Change `- [-] Task 6.2` to `- [x] Task 6.2` to mark as completed\n```\n\n---\n\n## Phase 7: テストとデプロイ準備\n\n### - [ ] Task 7.1: 統合テストの作成\n**Files**: \n- `tests/test_speakerdeck_integration.py` (新規)\n\n**Description**:\nSpeakerDeckフィード取得からPDF保存、APIダウンロードまでの全フローを統合テスト。モックを使った実際のワークフローシミュレーション。\n\n**Requirements**: All\n\n**Dependencies**: Task 4.1, Task 5.2\n\n**_Prompt**:\n```\nImplement the task for spec speakerdeck-feed-support, first run spec-workflow-guide to get the workflow guide then implement the task:\n\nRole: QA Engineer specializing in integration testing and end-to-end workflow validation\n\nTask: Create comprehensive integration tests in `tests/test_speakerdeck_integration.py` covering the complete SpeakerDeck workflow. Test feed fetch → document insertion → PDF download → API serving.\n\nContext:\n- Test full workflow: feed parsing → URL ingestion → PDF processing → DB update → API download\n- Use test database (test_speakerdeck.db or similar)\n- Mock external HTTP calls (SpeakerDeck feed, oEmbed API, PDF download)\n- Test both success and failure scenarios\n\nRestrictions:\n- Must use test database, not production database\n- Must mock all external HTTP requests\n- Must clean up test files and database after tests\n- Follow existing integration test patterns in tests/\n- Each test should be independent\n\nLeverage:\n- conftest.py for database fixtures\n- tests/test_basic.py for integration test patterns\n- pytest fixtures for test data\n- httpx_mock or responses library for HTTP mocking\n\nSuccess Criteria:\n- Test: test_fetch_speakerdeck_feed() - feed parsing\n- Test: test_ingest_speakerdeck_url() - document insertion with PDF\n- Test: test_download_pdf_endpoint() - API endpoint returns file\n- Test: test_pdf_not_found_error() - 404 when pdf_path is NULL\n- Test: test_invalid_document_id() - 404 when document doesn't exist\n- All tests pass independently\n- Proper cleanup (database, files)\n- Test coverage validates all requirements\n\nInstructions:\n1. First, update tasks.md: Change `- [ ] Task 7.1` to `- [-] Task 7.1` to mark as in-progress\n2. Create integration test file with comprehensive test cases\n3. Run tests with: pytest tests/test_speakerdeck_integration.py -v\n4. Verify all tests pass and cleanup works correctly\n5. After completing the task, update tasks.md: Change `- [-] Task 7.1` to `- [x] Task 7.1` to mark as completed\n```\n\n---\n\n### - [ ] Task 7.2: マイグレーション実行と動作確認\n**Files**: \n- (既存マイグレーションツールを使用)\n\n**Description**:\n作成したマイグレーションを実行し、PDFディレクトリを作成。開発環境でSpeakerDeckソースを登録して実際のフィードを取得し、機能が正常に動作することを確認。\n\n**Requirements**: All\n\n**Dependencies**: Task 7.1\n\n**_Prompt**:\n```\nImplement the task for spec speakerdeck-feed-support, first run spec-workflow-guide to get the workflow guide then implement the task:\n\nRole: DevOps Engineer specializing in deployment and operational verification\n\nTask: Execute database migration and perform end-to-end smoke test of SpeakerDeck feature. Verify all components work together in development environment.\n\nContext:\n- Need to run migration 007_add_pdf_support.sql\n- Create PDF storage directory structure\n- Register test SpeakerDeck source in admin panel\n- Trigger manual feed fetch to verify full workflow\n- Check document card displays PDF button\n- Test PDF download from UI\n\nRestrictions:\n- Use development database (data/scraps.db or test database)\n- Do not use production SpeakerDeck accounts for testing\n- Verify migration is idempotent (can run multiple times)\n- Document any manual steps required\n\nLeverage:\n- migrations/apply_migrations.py for running migrations\n- Admin panel for source registration\n- Browser DevTools for debugging UI issues\n\nSuccess Criteria:\n- Migration 007_add_pdf_support.sql executed successfully\n- Directory created: data/assets/pdfs/speakerdeck/\n- Test SpeakerDeck source registered (use public SpeakerDeck feed)\n- Feed fetch completes without errors\n- Document inserted with pdf_path populated\n- PDF file exists at specified path\n- UI displays PDF download button\n- PDF downloads successfully from browser\n- All logs show appropriate INFO/WARNING messages\n\nVerification Steps:\n1. Run migration: python migrations/apply_migrations.py\n2. Create directory: mkdir -p data/assets/pdfs/speakerdeck\n3. Start app: uvicorn app.main:app --reload\n4. Register source: Admin → Sources → Add SpeakerDeck source\n5. Trigger fetch: Use admin panel or wait for cron\n6. Check logs for PDF processing\n7. Verify UI shows PDF button\n8. Download PDF and verify file\n\nInstructions:\n1. First, update tasks.md: Change `- [ ] Task 7.2` to `- [-] Task 7.2` to mark as in-progress\n2. Execute migration and create directories\n3. Perform end-to-end smoke test following verification steps\n4. Document any issues found and resolved\n5. After completing the task, update tasks.md: Change `- [-] Task 7.2` to `- [x] Task 7.2` to mark as completed\n```\n\n---\n\n### - [ ] Task 7.3: ドキュメントとREADME更新\n**Files**: \n- `README.md` (変更)\n- `docs/` (必要に応じて)\n\n**Description**:\nREADMEにSpeakerDeck対応を追加。管理画面でのソース登録方法、PDF保存の動作、トラブルシューティングを記載。\n\n**Requirements**: All\n\n**Dependencies**: Task 7.2\n\n**_Prompt**:\n```\nImplement the task for spec speakerdeck-feed-support, first run spec-workflow-guide to get the workflow guide then implement the task:\n\nRole: Technical Writer specializing in developer documentation and user guides\n\nTask: Update project documentation to reflect SpeakerDeck feed support feature. Add usage instructions, troubleshooting tips, and feature description.\n\nContext:\n- README.md has sections for features, usage, configuration\n- Need to document SpeakerDeck as new content source\n- Explain PDF auto-download and storage\n- Document admin panel source registration\n- Include troubleshooting for common issues\n\nRestrictions:\n- Must maintain existing documentation structure\n- Follow project's Japanese language requirement for user-facing content\n- Keep technical details concise but comprehensive\n- Include examples where helpful\n\nLeverage:\n- README.md existing feature descriptions for style\n- docs/ directory for detailed documentation if needed\n- .github/copilot-instructions.md for context\n\nSuccess Criteria:\n- README.md updated with SpeakerDeck in supported sources list\n- Usage section explains how to register SpeakerDeck source\n- Feature description mentions PDF auto-download and storage\n- Troubleshooting section includes: PDF download failures, feed parsing errors, storage path issues\n- Configuration notes for SpeakerDeck username vs direct URL\n- Example SpeakerDeck source config in README\n- Japanese language for user-facing instructions\n\nDocumentation Sections to Update:\n1. 主な機能 (Features): Add SpeakerDeck support\n2. コンテンツソース (Content Sources): Add SpeakerDeck details\n3. 使い方 (Usage): Add source registration instructions\n4. トラブルシューティング: Add SpeakerDeck-specific issues\n\nInstructions:\n1. First, update tasks.md: Change `- [ ] Task 7.3` to `- [-] Task 7.3` to mark as in-progress\n2. Review README.md structure and identify update locations\n3. Add SpeakerDeck documentation following existing patterns\n4. Include practical examples and troubleshooting tips\n5. After completing the task, update tasks.md: Change `- [-] Task 7.3` to `- [x] Task 7.3` to mark as completed\n```\n\n---\n\n## 完了基準\n\nすべてのタスクが完了した時点で、以下が達成されていること:\n\n- ✅ データベースにpdf_pathカラムが追加され、マイグレーションが適用されている\n- ✅ SpeakerDeckHandlerクラスが実装され、ユニットテストが通過している\n- ✅ SpeakerDeckフィード取得が動作し、trigger_fetch_for_sourceに統合されている\n- ✅ ドキュメント挿入時にPDF自動ダウンロードが機能している\n- ✅ PDFダウンロードAPIエンドポイントが実装され、main.pyに登録されている\n- ✅ 記事カードとドキュメント詳細ページにPDFダウンロードボタンが表示される\n- ✅ 統合テストが作成され、全テストが通過している\n- ✅ 開発環境での動作確認が完了している\n- ✅ ドキュメントが更新され、使い方が記載されている\n\n## 注意事項\n\n- 各タスクは独立して実行可能ですが、Dependenciesに記載されたタスクを先に完了してください\n- エラーハンドリングは各コンポーネントで適切に行い、一部の失敗が全体に影響しないようにしてください\n- PDF取得失敗時もドキュメント登録は成功させる設計を維持してください\n- セキュリティ（パストラバーサル対策、ファイルサイズ制限）を必ず実装してください\n- テストは必ずモックを使用し、実際の外部APIへのリクエストは行わないでください\n",
  "fileStats": {
    "size": 32084,
    "lines": 771,
    "lastModified": "2025-10-04T06:32:46.513Z"
  },
  "comments": []
}