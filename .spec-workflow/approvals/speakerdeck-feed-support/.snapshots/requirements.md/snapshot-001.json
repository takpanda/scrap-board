{
  "id": "snapshot_1759558354988_ki9c60low",
  "approvalId": "approval_1759558354980_dpxlz51za",
  "approvalTitle": "SpeakerDeck Feed Support - Requirements",
  "version": 1,
  "timestamp": "2025-10-04T06:12:34.988Z",
  "trigger": "initial",
  "status": "pending",
  "content": "# Requirements: SpeakerDeck Feed Support\n\n## 概要\nSpeakerDeckの RSS/Atom フィードを登録・自動取り込みし、各プレゼンテーションのPDFをサーバー上に保存して、記事カードからダウンロードできるようにする機能を実装します。これにより、プレゼンテーション資料を効率的に収集・管理できるようになります。\n\n## 背景・動機\n- **問題**: 現在、Scrap-Boardは一般的なウェブ記事とPDFアップロードに対応していますが、SpeakerDeckのような専門的なコンテンツソースからの自動収集には対応していません\n- **ニーズ**: 技術者やジャーナリストがプレゼンテーション資料を継続的に収集し、オフラインでもアクセスできるようにしたい\n- **価値**: フィード登録により新しいプレゼンテーションの自動取り込み、PDFの永続保存によりコンテンツの可用性向上\n\n## ユーザーストーリー\n\n### US-1: SpeakerDeckフィードの登録\n**As a** コンテンツ収集者  \n**I want to** SpeakerDeckのユーザーアカウントのRSS/Atomフィードを登録できる  \n**So that** 新しいプレゼンテーションが自動的に取り込まれる\n\n**Acceptance Criteria:**\n- 管理画面のソース登録フォームで「SpeakerDeck」タイプを選択できる\n- SpeakerDeckのユーザー名を入力すると、適切なフィードURL（`.rss` または `.atom`）が生成される\n- フィードURLを直接入力することもできる\n- 登録後、cron スケジュールに従って自動的にフィードが取得される\n\n**EARS:**\n- **Event**: ユーザーが管理画面でSpeakerDeckソースを作成する時\n- **Condition**: ユーザー名またはフィードURLが入力されている場合\n- **Action**: システムは適切なフィードURLを保存し、定期取得スケジュールに追加する\n- **Response**: 成功メッセージとソース一覧への追加\n\n### US-2: SpeakerDeckフィードからのエントリ取得\n**As a** システム  \n**I want to** 登録されたSpeakerDeckフィードから最新エントリを取得する  \n**So that** 新しいプレゼンテーションがデータベースに保存される\n\n**Acceptance Criteria:**\n- cron スケジュールに従って自動的にフィードを取得する\n- RSS/Atom フィードの両方の形式に対応する\n- 各エントリから title, link, published, summary を抽出する\n- 重複URLは自動的にスキップする（既存の仕組みを利用）\n- エラー発生時も他のソースに影響を与えない\n\n**EARS:**\n- **Event**: スケジューラーが指定時刻にSpeakerDeckソースをトリガーする時\n- **Condition**: ソースが有効（enabled=1）である場合\n- **Action**: システムはフィードをパースし、各エントリをingestionパイプラインに送る\n- **Response**: ログに取得件数とエラー情報を記録\n\n### US-3: SpeakerDeck PDFの自動ダウンロードと保存\n**As a** システム  \n**I want to** SpeakerDeckのプレゼンテーションページからPDFを自動的にダウンロードして保存する  \n**So that** ユーザーがオフラインでもアクセスできる\n\n**Acceptance Criteria:**\n- SpeakerDeckのURL（例: `https://speakerdeck.com/username/presentation-slug`）を検出する\n- SpeakerDeck APIまたはoembed機能を利用してPDFダウンロードURLを取得する\n- PDFを `data/assets/pdfs/speakerdeck/` ディレクトリに保存する\n- ファイル名は `{document_id}.pdf` または `{unique_slug}.pdf` とする\n- データベースの documents テーブルに PDF パス（`pdf_path` カラム）を記録する\n- ダウンロードエラー時はログに記録するが、ドキュメント登録自体は失敗させない\n\n**EARS:**\n- **Event**: SpeakerDeckソースからのドキュメントがingestionパイプラインで処理される時\n- **Condition**: URLがSpeakerDeckドメインで、PDF取得が可能な場合\n- **Action**: システムはPDFをダウンロードし、指定ディレクトリに保存し、パスをDBに記録する\n- **Response**: ドキュメントに `pdf_path` フィールドが設定される\n\n### US-4: 記事カードからのPDFダウンロード\n**As a** ユーザー  \n**I want to** 記事カード上でダウンロードボタンをクリックしてPDFをダウンロードできる  \n**So that** ローカルにPDFを保存できる\n\n**Acceptance Criteria:**\n- PDFが保存されているドキュメントのカードに「PDFダウンロード」アイコンまたはボタンが表示される\n- ボタンをクリックすると、保存されたPDFファイルがダウンロードされる\n- PDFが存在しない場合、ボタンは表示されない\n- ダウンロードは `/api/documents/{id}/pdf` エンドポイント経由で行われる\n- 適切なContent-Typeヘッダー（`application/pdf`）とContent-Dispositionヘッダーが設定される\n\n**EARS:**\n- **Event**: ユーザーがPDFダウンロードボタンをクリックする時\n- **Condition**: ドキュメントに `pdf_path` が設定されており、ファイルが存在する場合\n- **Action**: システムは指定されたPDFファイルを読み込み、HTTPレスポンスとして返す\n- **Response**: ブラウザがPDFファイルのダウンロードを開始する\n\n### US-5: PDF保存状態の管理画面での確認\n**As a** 管理者  \n**I want to** 管理画面でどのドキュメントにPDFが保存されているか確認できる  \n**So that** ストレージ使用状況を把握し、必要に応じて管理できる\n\n**Acceptance Criteria:**\n- ドキュメント一覧に「PDF」カラムまたはアイコンが表示される\n- PDFが保存されているドキュメントには✓マークまたはファイルサイズが表示される\n- PDF保存エラーがあった場合、エラーステータスが表示される\n- 検索/フィルターでPDF有無による絞り込みができる（将来的）\n\n**EARS:**\n- **Event**: 管理者が管理画面のドキュメント一覧を開く時\n- **Condition**: ドキュメントに `pdf_path` が設定されている場合\n- **Action**: システムはPDF保存状態を示すUIを表示する\n- **Response**: 一目でPDF保存状態を確認できる\n\n## 機能要件\n\n### FR-1: データベーススキーマの拡張\n- documents テーブルに `pdf_path TEXT` カラムを追加する\n- マイグレーションスクリプトを作成する（`007_add_pdf_support.sql`）\n\n### FR-2: SpeakerDeckソースタイプの実装\n- `app/services/ingest_worker.py` に `_fetch_speakerdeck_items()` 関数を追加する\n- RSS（`.rss`）とAtom（`.atom`）の両方に対応する\n- 設定項目: `username`（オプション）、`url`（直接指定）、`per_page`（デフォルト20）\n\n### FR-3: SpeakerDeck PDF取得機能\n- `app/services/speakerdeck_handler.py` を新規作成する\n- SpeakerDeck URLからPDFダウンロードURLを取得する関数を実装する\n- oembed API（`https://speakerdeck.com/oembed.json?url={url}`）を利用する\n- PDFをダウンロードして保存する関数を実装する\n\n### FR-4: Ingestionパイプラインの拡張\n- `app/services/ingest_worker.py` の `_insert_document_from_url()` 関数を拡張する\n- SpeakerDeckドメインを検出し、PDF取得処理を呼び出す\n- PDF保存後、`pdf_path` をドキュメントレコードに保存する\n\n### FR-5: PDFダウンロードAPIエンドポイント\n- `app/api/routes/documents.py` に `GET /api/documents/{id}/pdf` エンドポイントを追加する\n- ファイルの存在確認とセキュリティチェックを実装する\n- `FileResponse` を使用してPDFを返す\n\n### FR-6: UIコンポーネントの追加\n- `app/templates/components/_document_card.html` にPDFダウンロードボタンを追加する\n- アイコンは既存のアイコンセット（Heroicons等）から選択する\n- PDF未保存の場合はボタンを表示しない\n\n## 非機能要件\n\n### NFR-1: パフォーマンス\n- PDFダウンロードは非同期処理で行い、ingestionパイプラインをブロックしない\n- タイムアウトは30秒とする\n- 大きなPDFファイル（>50MB）の処理に注意する\n\n### NFR-2: ストレージ管理\n- PDFファイルは `data/assets/pdfs/speakerdeck/` ディレクトリに保存する\n- ディレクトリが存在しない場合は自動作成する\n- ファイル名の衝突を避けるため、document IDまたはユニークなハッシュを使用する\n\n### NFR-3: エラーハンドリング\n- PDF取得失敗時もドキュメント登録は成功させる（PDFはオプショナル）\n- エラーログに詳細情報を記録する\n- ネットワークエラー、タイムアウト、ファイルシステムエラーを適切に処理する\n\n### NFR-4: セキュリティ\n- PDFダウンロードエンドポイントでパストラバーサル攻撃を防ぐ\n- ダウンロード元のURLを検証する（SpeakerDeckドメインのみ許可）\n- ファイルサイズ制限を設ける（デフォルト100MB）\n\n### NFR-5: 互換性\n- 既存のフィード取得メカニズム（RSS、Qiita、Hatena）に影響を与えない\n- 既存のドキュメントテーブルへの後方互換性を維持する（`pdf_path` はNULL許可）\n\n## 技術的制約\n- Python 3.11+、FastAPI フレームワーク\n- SQLite データベース（マイグレーション対応）\n- feedparser ライブラリ（RSS/Atom解析）\n- httpx ライブラリ（HTTP通信）\n- 既存のingestionパイプラインとの統合\n\n## 依存関係\n- **前提条件**: 既存のRSSフィード取得機能（hatena, qiita, rss）が動作している\n- **ブロッカー**: なし\n- **関連機能**: PDF抽出機能（既存）、サムネイル取得機能（既存）\n\n## 除外項目\n- SpeakerDeck以外のスライド共有サービス（SlideShare、Docswell等）のサポート\n- PDFの自動OCR処理（既存のPDF処理機能を利用）\n- PDFのバージョン管理や差分検出\n- ユーザー毎のPDFアクセス権限管理（将来のマルチユーザー機能で検討）\n- 埋め込みプレビュー機能（PDFビューアー）\n\n## 成功指標\n- SpeakerDeckソースが正常に登録され、フィードが取得できること\n- 新しいプレゼンテーションが自動的にドキュメントとして保存されること\n- PDFファイルが正常にダウンロード・保存されること（成功率 > 90%）\n- ユーザーが記事カードからPDFをダウンロードできること\n- 既存機能に影響がないこと（全テストが成功）\n\n## 参考資料\n- [SpeakerDeck RSS Feed Documentation](https://help.speakerdeck.com/help/is-there-an-rss-feed-for-speaker-deck)\n- [SpeakerDeck oEmbed API](https://help.speakerdeck.com/help/how-do-i-use-oembed-to-display-a-deck-on-my-site)\n- 既存実装: `app/services/ingest_worker.py` (_fetch_hatena_items, _fetch_rss_items)\n- 既存実装: `app/api/routes/ingest.py` (RSS ingestion)\n- 既存実装: `app/services/extractor.py` (PDF extraction)\n",
  "fileStats": {
    "size": 11299,
    "lines": 192,
    "lastModified": "2025-10-04T06:12:18.885Z"
  },
  "comments": []
}